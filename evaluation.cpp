#include <string.h>
#include "defs.h"
#include "data.h"
#include "protos.h"
#include <stdlib.h>
#include <stdio.h>
#include <stdlib.h>
#include <iostream>

#define DOUBLED_PAWN_PENALTY		10
#define ISOLATED_PAWN_PENALTY		20
#define BACKWARDS_PAWN_PENALTY		8
#define PASSED_PAWN_BONUS			20
#define ROOK_SEMI_OPEN_FILE_BONUS	10
#define ROOK_OPEN_FILE_BONUS		15
#define ROOK_ON_SEVENTH_BONUS		20

/*int pawns[64] =
{
	  0,   0,   0,   0,   0,   0,   0,   0,
	  15, 20,  25,  30,  30,  25,  20,  15,
	  12, 15,  20,  26,  26,  20,  15,  12,
	  9,  12,  15,  20,  20,  15,  12,   9,
	  6,   8,  10,  12,  12,  10,   8,   6,
	  3,   4,   5,  -5,  -5,   5,   4,   3,
	  0,   0,   0, -30, -30,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0
};

int knights[64] =
{
	-10, -10, -10, -10, -10, -10, -10, -10,
	-10,   0,   0,   0,   0,   0,   0, -10,
	-10,   0,  15,  15,  15,  15,   0, -10,
	-10,   0,  15,  25,  25,  15,   0, -10,
	-10,   0,  15,  25,  25,  15,   0, -10,
	-10,   0,  15,  15,  15,  15,   0, -10,
	-10,   0,   0,   0,   0,   0,   0, -10,
	-10, -35, -10, -10, -10, -10, -35, -10
};

int bishops[64] = {
	-40, -10, -10, -10, -10, -10, -10, -40,
	-10,   0,   0,   0,   0,   0,   0, -10,
	-10,   0,  15,  15,  15,  15,   0, -10,
	-10,   0,  15,  25,  25,  15,   0, -10,
	-10,   0,  15,  25,  25,  15,   0, -10,
	-10,   0,  15,  15,  15,  15,   0, -10,
	-10,   0,   0,   0,   0,   0,   0, -10,
	-40, -10, -30, -10, -10, -30, -10, -40
};

int kings[64] = {
	-60, -70, -80, -90, -90, -80, -70, -60,
	-40, -60, -70, -80, -80, -70, -60, -40,
	-40, -40, -60, -70, -70, -40, -40, -40,
	-40, -40, -40, -60, -60, -40, -40, -40,
	-40, -40, -40, -60, -60, -40, -40, -40,
	-40, -40, -40, -40, -40, -40, -40, -40,
	-20, -20, -20, -20, -20, -20, -20, -20,
	  0,  20,  40, -20,   0, -20,  40,  20
};*/
int pawns[64] = {
	  0,   0,   0,   0,   0,   0,   0,   0,
	  5,  10,  15,  20,  20,  15,  10,   5,
	  4,   8,  12,  16,  16,  12,   8,   4,
	  3,   6,   9,  12,  12,   9,   6,   3,
	  2,   4,   6,   8,   8,   6,   4,   2,
	  1,   2,   3, -10, -10,   3,   2,   1,
	  0,   0,   0, -40, -40,   0,   0,   0,
	  0,   0,   0,   0,   0,   0,   0,   0
};

int knights[64] = {
	-10, -10, -10, -10, -10, -10, -10, -10,
	-10,   0,   0,   0,   0,   0,   0, -10,
	-10,   0,   5,   5,   5,   5,   0, -10,
	-10,   0,   5,  10,  10,   5,   0, -10,
	-10,   0,   5,  10,  10,   5,   0, -10,
	-10,   0,   5,   5,   5,   5,   0, -10,
	-10,   0,   0,   0,   0,   0,   0, -10,
	-10, -30, -10, -10, -10, -10, -30, -10
};

int bishops[64] = {
	-10, -10, -10, -10, -10, -10, -10, -10,
	-10,   0,   0,   0,   0,   0,   0, -10,
	-10,   0,   5,   5,   5,   5,   0, -10,
	-10,   0,   5,  10,  10,   5,   0, -10,
	-10,   0,   5,  10,  10,   5,   0, -10,
	-10,   0,   5,   5,   5,   5,   0, -10,
	-10,   0,   0,   0,   0,   0,   0, -10,
	-10, -10, -20, -10, -10, -20, -10, -10
};

int kings[64] = {
	-40, -40, -40, -40, -40, -40, -40, -40,
	-40, -40, -40, -40, -40, -40, -40, -40,
	-40, -40, -40, -40, -40, -40, -40, -40,
	-40, -40, -40, -40, -40, -40, -40, -40,
	-40, -40, -40, -40, -40, -40, -40, -40,
	-40, -40, -40, -40, -40, -40, -40, -40,
	-20, -20, -20, -20, -20, -20, -20, -20,
	  0,  20,  40, -20,   0, -20,  40,  20
};

int kings_end[64] =
{
	  0,  10,  20,  30,  30,  20,  10,   0,
	 10,  20,  30,  40,  40,  30,  20,  10,
	 20,  30,  40,  50,  50,  40,  30,  20,
	 30,  40,  50,  60,  60,  50,  40,  30,
	 30,  40,  50,  60,  60,  50,  40,  30,
	 20,  30,  40,  50,  50,  40,  30,  20,
	 10,  20,  30,  40,  40,  30,  20,  10,
	  0,  10,  20,  30,  30,  20,  10,   0
};

int flip[64] =
{
	 56,  57,  58,  59,  60,  61,  62,  63,
	 48,  49,  50,  51,  52,  53,  54,  55,
	 40,  41,  42,  43,  44,  45,  46,  47,
	 32,  33,  34,  35,  36,  37,  38,  39,
	 24,  25,  26,  27,  28,  29,  30,  31,
	 16,  17,  18,  19,  20,  21,  22,  23,
	  8,   9,  10,  11,  12,  13,  14,  15,
	  0,   1,   2,   3,   4,   5,   6,   7
};

int position()
{
    int eval = 0;
    for (int i = 0; i < 64; i++)
    {
        if (color[i] != EMPTY)
        {
            int side = 1 - 2 * color[i];
            switch( piece[i] )
            {
                case PAWN: eval += side * 100;
                           if (color[i] == WHITE) eval += pawns[i];
                           else eval -= pawns[flip[i]];
                           break;

                case KNIGHT: eval += side * 325;
                             if (color[i] == WHITE) eval += knights[i];
                             else eval -= knights[flip[i]];
                             break;

                case BISHOP: eval += side * 350;
                             if (color[i] == WHITE) eval += bishops[i];
                             else eval -= bishops[flip[i]];
                             break;

                case ROOK: eval += side * 525; break;
                case QUEEN: eval += side * 950; break;
                case KING: if (endgame())
                           {
                               if (color[i] == WHITE) eval += kings_end[i];
                               else eval -= kings_end[flip[i]];
                           }
                           else
                           {
                               if (color[i] == WHITE) eval += kings[i];
                               else eval -= kings[flip[i]];
                           }
                           break;
            }
        }
    }

    return eval;
}
